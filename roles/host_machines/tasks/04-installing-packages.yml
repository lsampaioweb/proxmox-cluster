---
- name: Removing the pve-enterprise repository from sources list
  ansible.builtin.apt_repository:
    repo: "deb https://enterprise.proxmox.com/debian/pve bullseye pve-enterprise"
    state: "absent"

- name: Adding the pve-no-subscription repository into sources list
  ansible.builtin.apt_repository:
    repo: "deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription"
    state: "present"

- name: Adding non-free repositories into sources list
  import_tasks: "roles/common/tasks/packages/non-free.yml"

- name: Updating apt repository and cache
  ansible.builtin.apt:
    update_cache: true

- name: Upgrading full distro packages
  ansible.builtin.apt:
    upgrade: "dist"

- name: Installing apt packages
  import_tasks: "roles/common/tasks/packages/apt.yml"
  vars:
    packages:
      - {name: "sudo"} # To enable elevated command.
      - {name: "python3-pip"} # To enable ansible scripts.
      - {name: "systemd-timesyncd"} # To enable time synchronization.
      - {name: "ethtool"} # To enable Wake-on-Lan.
      - {name: "libsasl2-modules"} # Necessary to Postfix.
      - {name: "ifupdown2"} # To enable make changes on the network configuration and don't require server reboot.
      - {name: "parted"} # To format hard disks (HDD, SSD and NVME).
      - {name: "qrencode"} # To enable two-factor authentication (2FA)

- name: Installing the intel-microcode package to fix the CPU bug
  import_tasks: "roles/common/tasks/packages/apt.yml"
  vars:
    packages:
      - {name: "intel-microcode"} # To fix the intel microcode bug.
  when: "hostvars[inventory_hostname].ansible_processor is search('Intel')"

- name: Installing pip packages
  import_tasks: "roles/common/tasks/packages/pip.yml"
  vars:
    packages:
      - {name: "pip"} # To install other python applications.
      - {name: "proxmoxer"} # To enable ansible scripts.
      - {name: "requests"} # To enable ansible scripts.
      - {name: "pexpect"} # To enable ansible scripts that use the expect module.

- name: Checking if a reboot is needed
  ansible.builtin.stat:
    path: "/var/run/reboot-required"
    get_md5: "no"
  register: "reboot_required"

- name: Rebooting the host if kernel was updated
  ansible.builtin.reboot:
    msg: "Reboot initiated by Ansible for kernel updates."
    connect_timeout: 5
    reboot_timeout: 40
    pre_reboot_delay: 0
    post_reboot_delay: 20
    test_command: "whoami"
  when: reboot_required.stat.exists
